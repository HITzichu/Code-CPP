
/*


题目描述
如果一个数列S满足对于所有的合法的i,都有S[i + 1] = S[i] + d, 这里的d也可以是负数和零,我们就称数列S为等差数列。
小易现在有一个长度为n的数列x,小易想把x变为一个等差数列。小易允许在数列上做交换任意两个位置的数值的操作,并且交换操作允许交换多次。但是有些数列通过交换还是不能变成等差数列,小易需要判别一个数列是否能通过交换操作变成等差数列
输入描述:
输入包括两行,第一行包含整数n(2 ≤ n ≤ 50),即数列的长度。
第二行n个元素x[i](0 ≤ x[i] ≤ 1000),即数列中的每个整数。
输出描述:
如果可以变成等差数列输出"Possible",否则输出"Impossible"。
示例1
输入
3
3 1 2
输出
Possible



先求得公差，公差不是整数即false，公差0和非0进行划分，利用O(n)的额外空间，即可


*/



#include<iostream>
#include<vector>
using namespace std;



bool Judge(vector<int>&data)
{
    if(data.size()<2) return true;
    int MAX=data[0],MIN=data[0];
    for(int i=0;i<data.size();i++)
    {
        MIN=min(MIN,data[i]);
        MAX=max(MAX,data[i]);
    }
    if((MAX-MIN)%(data.size()-1)!=0) return false;
    
    if(MAX==MIN)
    {
        for(int i=1;i<data.size();i++)
        {
            if(data[i]!=data[0]) return false;
        }
        return true;
    }
    
    int dif=(MAX-MIN)/(data.size()-1);
 
    vector<bool>flag(data.size(),0);
    for(auto c:data)
    {
        if((c-MIN)%dif!=0 || flag[(c-MIN)/dif]!=0) return false;
        flag[(c-MIN)/dif]=1;
    }
    return true;
}


int main()
{
    int len;
    vector<int>data;
    int tmp;
    cin>>len;
    for(int i=0;i<len;i++)
    {
        cin>>tmp;
        data.push_back(tmp);
    }
    if(Judge(data))
        cout<<"Possible"<<endl;
    else
        cout<<"Impossible"<<endl;
        
}
